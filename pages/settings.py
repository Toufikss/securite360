"""
Page des param√®tres - S√©curit√© 360
Configuration du syst√®me (Admin uniquement)
"""

import streamlit as st
from utils.helpers import display_page_header
from utils.config import COLORS, APP_NAME, APP_VERSION

def show(auth, db):
    """Affiche la page des param√®tres"""
    
    # V√©rifier les permissions
    auth.require_role("Admin")
    
    # En-t√™te
    display_page_header(
        "Param√®tres",
        "Configuration et personnalisation du syst√®me"
    )
    
    # Tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üé® Apparence", "üîß Syst√®me", "üíæ Sauvegarde", "‚ÑπÔ∏è √Ä propos"])
    
    with tab1:
        st.markdown("###  Personnalisation de l'apparence")
        
        with st.form("apparence_form"):
            company_name = st.text_input(
                "Nom de l'organisation",
                value=db.get_setting("company_name") or "S√©curit√© 360",
                help="Nom affich√© dans l'application"
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                theme_color = st.color_picker(
                    "Couleur principale",
                    value=db.get_setting("theme_color") or COLORS['primary']
                )
            
            with col2:
                # Upload du logo
                logo_file = st.file_uploader(
                    "Logo de l'organisation",
                    type=['png', 'jpg', 'jpeg'],
                    help="Format recommand√©: PNG, taille max 2MB"
                )
            
            if st.form_submit_button("üíæ Enregistrer les modifications", use_container_width=True, type="primary"):
                db.update_setting("company_name", company_name)
                db.update_setting("theme_color", theme_color)
                
                if logo_file:
                    # Sauvegarder le logo (simulation)
                    logo_path = f"assets/{logo_file.name}"
                    db.update_setting("logo_path", logo_path)
                
                st.success("‚úÖ Param√®tres d'apparence enregistr√©s!")
                st.rerun()
        
        # Aper√ßu
        st.markdown("####  Aper√ßu")
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, {theme_color}, {COLORS['secondary']}); padding: 2rem; border-radius: 12px; text-align: center;">
            <h2 style="color: white; margin: 0;">{company_name}</h2>
            <p style="color: rgba(255,255,255,0.8); margin: 0.5rem 0 0 0;">Syst√®me de gestion ISO 27001</p>
        </div>
        """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("### üîß Configuration du syst√®me")
        
        with st.form("system_form"):
            st.markdown("#### Param√®tres de s√©curit√©")
            
            col1, col2 = st.columns(2)
            
            with col1:
                session_timeout = st.number_input(
                    "D√©lai d'expiration de session (minutes)",
                    min_value=5,
                    max_value=480,
                    value=30,
                    help="Dur√©e avant d√©connexion automatique"
                )
            
            with col2:
                password_expiry = st.number_input(
                    "Expiration des mots de passe (jours)",
                    min_value=30,
                    max_value=365,
                    value=90,
                    help="Fr√©quence de renouvellement des mots de passe"
                )
            
            st.markdown("#### Notifications")
            
            col1, col2 = st.columns(2)
            
            with col1:
                email_notifications = st.checkbox(
                    "Activer les notifications par email",
                    value=False,
                    help="Alertes pour les non-conformit√©s et audits"
                )
            
            with col2:
                admin_email = st.text_input(
                    "Email de l'administrateur",
                    placeholder="admin@exemple.com"
                )
            
            st.markdown("#### Rapports automatiques")
            
            auto_reports = st.checkbox(
                "G√©n√©rer des rapports automatiques",
                value=False,
                help="Rapports de conformit√© mensuels"
            )
            
            if auto_reports:
                report_frequency = st.selectbox(
                    "Fr√©quence",
                    ["Hebdomadaire", "Mensuel", "Trimestriel"]
                )
            
            st.markdown("#### Journalisation")
            
            col1, col2 = st.columns(2)
            
            with col1:
                log_level = st.selectbox(
                    "Niveau de journalisation",
                    ["Info", "Warning", "Error", "Debug"]
                )
            
            with col2:
                log_retention = st.number_input(
                    "R√©tention des logs (jours)",
                    min_value=30,
                    max_value=730,
                    value=365
                )
            
            if st.form_submit_button("üíæ Enregistrer la configuration", use_container_width=True, type="primary"):
                st.success("‚úÖ Configuration syst√®me enregistr√©e!")
                st.info("Note: Certains param√®tres n√©cessitent un red√©marrage pour prendre effet")
    
    with tab3:
        st.markdown("### üíæ Sauvegarde et restauration")
        
        st.markdown(f"""
        <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px; margin-bottom: 1rem;">
            <h4 style="color: {COLORS['text']}; margin-top: 0;">Sauvegarde de la base de donn√©es</h4>
            <p style="color: {COLORS['text_secondary']};">
                Cr√©ez une sauvegarde compl√®te de toutes les donn√©es de l'application.
                Incluant les utilisateurs, crit√®res, audits et documents.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üì• Sauvegarder la base de donn√©es", use_container_width=True, type="primary"):
                import sqlite3
                import shutil
                from datetime import datetime
                
                try:
                    # Cr√©er une copie de la base de donn√©es
                    backup_filename = f"backup_securite360_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
                    shutil.copy2("securite360.db", backup_filename)
                    
                    with open(backup_filename, 'rb') as f:
                        st.download_button(
                            label="üì• T√©l√©charger la sauvegarde",
                            data=f,
                            file_name=backup_filename,
                            mime="application/octet-stream",
                            use_container_width=True
                        )
                    
                    st.success(f"‚úÖ Sauvegarde cr√©√©e: {backup_filename}")
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
        
        with col2:
            st.markdown("**Derni√®re sauvegarde:**")
            st.info("Aucune sauvegarde enregistr√©e")
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px; margin-bottom: 1rem;">
            <h4 style="color: {COLORS['text']}; margin-top: 0;">Restauration de la base de donn√©es</h4>
            <p style="color: {COLORS['text_secondary']};">
                Restaurez une sauvegarde pr√©c√©dente. <strong>Attention:</strong> Cette op√©ration 
                remplacera toutes les donn√©es actuelles.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_backup = st.file_uploader(
            "S√©lectionner un fichier de sauvegarde",
            type=['db'],
            help="Fichier .db g√©n√©r√© par l'outil de sauvegarde"
        )
        
        if uploaded_backup:
            st.warning("‚ö†Ô∏è La restauration √©crasera toutes les donn√©es actuelles. Cette action est irr√©versible.")
            
            col1, col2 = st.columns([1, 3])
            with col1:
                if st.button("‚ôªÔ∏è Restaurer", type="primary", use_container_width=True):
                    st.error("Fonction de restauration d√©sactiv√©e pour des raisons de s√©curit√© dans cette d√©mo")
        
        # Export CSV
        st.markdown("<br>", unsafe_allow_html=True)
        st.markdown(f"""
        <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px;">
            <h4 style="color: {COLORS['text']}; margin-top: 0;">Export des donn√©es</h4>
            <p style="color: {COLORS['text_secondary']};">
                Exportez les donn√©es au format CSV pour analyse externe.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Exporter les crit√®res", use_container_width=True):
                criteres = db.get_all_criteres()
                import pandas as pd
                df = pd.DataFrame(criteres)
                csv = df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "üì• T√©l√©charger CSV",
                    csv,
                    "criteres_export.csv",
                    "text/csv",
                    use_container_width=True
                )
        
        with col2:
            if st.button("üìã Exporter les audits", use_container_width=True):
                audits = db.get_all_audits()
                import pandas as pd
                df = pd.DataFrame(audits)
                csv = df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "üì• T√©l√©charger CSV",
                    csv,
                    "audits_export.csv",
                    "text/csv",
                    use_container_width=True
                )
        
        with col3:
            if st.button("‚öôÔ∏è Exporter les directives", use_container_width=True):
                directives = db.get_all_directives()
                import pandas as pd
                df = pd.DataFrame(directives)
                csv = df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "üì• T√©l√©charger CSV",
                    csv,
                    "directives_export.csv",
                    "text/csv",
                    use_container_width=True
                )
    
    with tab4:
        st.markdown("### ‚ÑπÔ∏è √Ä propos de l'application")
        
        st.markdown(f"""
            <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px;">
                <h4 style="color: {COLORS['text']}; margin-top: 0;">üìã Informations</h4>
                <p style="color: {COLORS['text_secondary']}; margin: 0.5rem 0;">
                    <strong>Application:</strong> {APP_NAME}<br>
                    <strong>Version:</strong> {APP_VERSION}<br>
                    <strong>Date de sortie:</strong> Janvier 2025<br>
                    <strong>Licence:</strong> Propri√©taire<br>
                    <strong>Norme:</strong> ISO/IEC 27001:2022
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px;">
                <h4 style="color: {COLORS['text']}; margin-top: 0;">üõ†Ô∏è Technologies</h4>
                <p style="color: {COLORS['text_secondary']}; margin: 0.5rem 0;">
                    <strong>Framework:</strong> Streamlit 1.31<br>
                    <strong>Base de donn√©es:</strong> SQLite3<br>
                    <strong>Graphiques:</strong> Plotly<br>
                    <strong>Rapports:</strong> ReportLab<br>
                    <strong>S√©curit√©:</strong> Bcrypt
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px;">
            <h4 style="color: {COLORS['text']}; margin-top: 0;">üìö Description</h4>
            <p style="color: {COLORS['text']}; line-height: 1.8;">
                {APP_NAME} est une solution compl√®te de gestion de la conformit√© ISO 27001. 
                L'application permet aux organisations de g√©rer efficacement leur Syst√®me de 
                Management de la S√©curit√© de l'Information (SMSI) en offrant:
            </p>
            <ul style="color: {COLORS['text']}; line-height: 1.8;">
                <li>Gestion compl√®te des 93 crit√®res de l'Annexe A</li>
                <li>Planification et suivi des audits internes</li>
                <li>G√©n√©ration automatique de rapports PDF</li>
                <li>Tableaux de bord interactifs</li>
                <li>Gestion documentaire int√©gr√©e</li>
                <li>Contr√¥le d'acc√®s bas√© sur les r√¥les</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="background-color: {COLORS['surface']}; padding: 1.5rem; border-radius: 12px;">
            <h4 style="color: {COLORS['text']}; margin-top: 0;">üìû Support</h4>
            <p style="color: {COLORS['text_secondary']};">
                Pour toute question ou assistance technique, veuillez contacter:
            </p>
            <p style="color: {COLORS['text']};">
                <strong>Email:</strong> support@securite360.com<br>
                <strong>Documentation:</strong> https://docs.securite360.com<br>
                <strong>Hotline:</strong> 0559750403
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Informations syst√®me
        with st.expander("üîç Informations syst√®me"):
            import platform
            import sys
            
            st.code(f"""
Syst√®me d'exploitation: {platform.system()} {platform.release()}
Architecture: {platform.machine()}
Python: {sys.version.split()[0]}
Streamlit: 1.31.0
Base de donn√©es: SQLite3
            """)
        
        # Copyright
        st.markdown(f"""
        <div style="text-align: center; color: {COLORS['text_secondary']}; padding: 2rem; margin-top: 2rem; border-top: 1px solid {COLORS['text_secondary']};">
            <p style="margin: 0;">¬© 2025 {APP_NAME}. Tous droits r√©serv√©s.</p>
            <p style="margin: 0.5rem 0 0 0; font-size: 0.85rem;">
                D√©velopp√© avec ‚ù§Ô∏è pour la s√©curit√© de l'information
            </p>
        </div>
        """, unsafe_allow_html=True)
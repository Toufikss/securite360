"""
Utilitaire de maintenance pour les ic√¥nes - S√©curit√© 360
Script pour v√©rifier, synchroniser et maintenir les ic√¥nes KPI
"""

import os
import sys
from pathlib import Path

# Ajouter le dossier parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

try:
    from utils.icons import icon_manager, ICONS_CONFIG, ICONS_PATHS
except ImportError:
    print("‚ùå Erreur: Impossible d'importer le module icons")
    sys.exit(1)

def check_folder_structure():
    """V√©rifie la structure des dossiers d'ic√¥nes"""
    print("üîç V√©rification de la structure des dossiers...")
    
    for category, path in ICONS_PATHS.items():
        full_path = os.path.abspath(path)
        exists = os.path.exists(full_path)
        
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {category}: {full_path}")
        
        if exists and os.path.isdir(full_path):
            files = [f for f in os.listdir(full_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.svg', '.gif'))]
            print(f"    üìÅ {len(files)} fichier(s) image trouv√©(s)")

def check_configured_icons():
    """V√©rifie les ic√¥nes configur√©es vs fichiers disponibles"""
    print("\nüìã V√©rification des ic√¥nes configur√©es...")
    
    availability = icon_manager.check_icons_availability()
    total_icons = 0
    missing_icons = 0
    
    for category, icons in availability.items():
        print(f"\nüìÇ Cat√©gorie: {category}")
        
        for icon_key, info in icons.items():
            total_icons += 1
            status = "‚úÖ" if info["exists"] else "‚ùå"
            
            if not info["exists"]:
                missing_icons += 1
            
            print(f"  {status} {icon_key}")
            print(f"      üìÑ Fichier: {info['file']}")
            print(f"      üìç Chemin: {info['path']}")
            
            if info.get("description"):
                print(f"      üìù Description: {info['description']}")
    
    print(f"\nüìä R√©sum√©:")
    print(f"  ‚Ä¢ Total ic√¥nes configur√©es: {total_icons}")
    print(f"  ‚Ä¢ Ic√¥nes disponibles: {total_icons - missing_icons}")
    print(f"  ‚Ä¢ Ic√¥nes manquantes: {missing_icons}")
    
    return missing_icons == 0

def list_available_files():
    """Liste tous les fichiers d'ic√¥nes disponibles"""
    print("\nüìÅ Fichiers d'ic√¥nes disponibles sur le disque...")
    
    for category, path in ICONS_PATHS.items():
        if os.path.exists(path) and os.path.isdir(path):
            print(f"\nüìÇ Dossier: {path}")
            
            files = []
            for ext in ['.png', '.jpg', '.jpeg', '.svg', '.gif']:
                files.extend([f for f in os.listdir(path) if f.lower().endswith(ext)])
            
            if files:
                for file in sorted(files):
                    # V√©rifier si le fichier est configur√©
                    is_configured = False
                    for icon_key, config in ICONS_CONFIG.get(category, {}).items():
                        if config["file"] == file:
                            is_configured = True
                            break
                    
                    status = "‚úÖ Configur√©" if is_configured else "‚ö†Ô∏è  Non configur√©"
                    print(f"  üìÑ {file} - {status}")
            else:
                print("  (aucun fichier image trouv√©)")

def suggest_missing_configurations():
    """Sugg√®re des configurations pour les fichiers non configur√©s"""
    print("\nüí° Suggestions de configuration pour fichiers non configur√©s...")
    
    kpi_path = ICONS_PATHS.get("kpi", "icone Indicateurs cl√©s de performance")
    if not os.path.exists(kpi_path):
        print(f"‚ùå Dossier KPI non trouv√©: {kpi_path}")
        return
    
    # Fichiers configur√©s
    configured_files = set()
    for config in ICONS_CONFIG.get("kpi", {}).values():
        configured_files.add(config["file"])
    
    # Fichiers disponibles
    available_files = []
    for ext in ['.png', '.jpg', '.jpeg', '.svg', '.gif']:
        available_files.extend([f for f in os.listdir(kpi_path) if f.lower().endswith(ext)])
    
    # Fichiers non configur√©s
    unconfigured = set(available_files) - configured_files
    
    if unconfigured:
        print("\nüîß Code √† ajouter dans utils/icons.py pour les nouveaux fichiers:")
        print('```python')
        
        for file in sorted(unconfigured):
            # G√©n√©rer une cl√© bas√©e sur le nom de fichier
            key = file.replace('.png', '').replace(' ', '_').replace('√©', 'e').replace('√®', 'e').lower()
            
            print(f'        "{key}": {{')
            print(f'            "file": "{file}",')
            print(f'            "alt": "{file.replace(".png", "").title()}",')
            print(f'            "description": "Description pour {file.replace(".png", "")}",')
            print(f'            "fallback": "üìä",')
            print(f'            "category": "custom"')
            print(f'        }},')
        
        print('```')
    else:
        print("‚úÖ Tous les fichiers disponibles sont configur√©s!")

def test_icon_loading():
    """Test le chargement de toutes les ic√¥nes"""
    print("\nüß™ Test de chargement des ic√¥nes...")
    
    success_count = 0
    error_count = 0
    
    for category in ICONS_CONFIG.keys():
        for icon_key in ICONS_CONFIG[category].keys():
            try:
                html = icon_manager.get_icon_html(category, icon_key, "32px")
                if html and len(html) > 10:  # HTML valide g√©n√©r√©
                    success_count += 1
                    print(f"  ‚úÖ {category}.{icon_key}")
                else:
                    error_count += 1
                    print(f"  ‚ö†Ô∏è  {category}.{icon_key} - HTML vide")
            except Exception as e:
                error_count += 1
                print(f"  ‚ùå {category}.{icon_key} - Erreur: {str(e)}")
    
    print(f"\nüìä R√©sultats des tests:")
    print(f"  ‚Ä¢ Succ√®s: {success_count}")
    print(f"  ‚Ä¢ Erreurs: {error_count}")
    
    return error_count == 0

def generate_icon_report():
    """G√©n√®re un rapport complet sur les ic√¥nes"""
    print("\nüìÑ G√©n√©ration du rapport complet...")
    
    report_file = "rapport_icones.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# Rapport des Ic√¥nes - S√©curit√© 360\n\n")
        f.write(f"G√©n√©r√© le: {__import__('datetime').datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
        
        # Configuration actuelle
        f.write("## Configuration Actuelle\n\n")
        
        availability = icon_manager.check_icons_availability()
        
        for category, icons in availability.items():
            f.write(f"### Cat√©gorie: {category}\n\n")
            f.write("| Ic√¥ne | Fichier | Statut | Description |\n")
            f.write("|-------|---------|--------|-----------|\n")
            
            for icon_key, info in icons.items():
                status = "‚úÖ Disponible" if info["exists"] else "‚ùå Manquant"
                description = info.get("description", "N/A")
                f.write(f"| {icon_key} | {info['file']} | {status} | {description} |\n")
            
            f.write("\n")
        
        # Statistiques
        f.write("## Statistiques\n\n")
        total = sum(len(icons) for icons in availability.values())
        available = sum(1 for icons in availability.values() 
                       for info in icons.values() if info["exists"])
        
        f.write(f"- **Total ic√¥nes configur√©es:** {total}\n")
        f.write(f"- **Ic√¥nes disponibles:** {available}\n") 
        f.write(f"- **Ic√¥nes manquantes:** {total - available}\n")
        f.write(f"- **Taux de disponibilit√©:** {(available/total*100):.1f}%\n\n")
        
        # Instructions
        f.write("## Instructions pour ajouter une nouvelle ic√¥ne\n\n")
        f.write("1. Placez le fichier PNG dans le dossier appropri√©\n")
        f.write("2. √âditez `utils/icons.py` pour ajouter la configuration\n")
        f.write("3. Utilisez `get_kpi_icon(\"votre_cle\")` dans votre code\n")
    
    print(f"‚úÖ Rapport g√©n√©r√©: {report_file}")

def main():
    """Fonction principale"""
    print("üé® Utilitaire de maintenance des ic√¥nes - S√©curit√© 360\n")
    
    # V√©rifications
    check_folder_structure()
    all_ok = check_configured_icons()
    list_available_files()
    suggest_missing_configurations()
    
    # Tests
    test_ok = test_icon_loading()
    
    # Rapport
    generate_icon_report()
    
    # R√©sum√© final
    print(f"\nüéØ R√©sum√© final:")
    
    if all_ok and test_ok:
        print("‚úÖ Tous les tests sont pass√©s!")
        print("‚úÖ Toutes les ic√¥nes sont disponibles et fonctionnelles.")
    else:
        print("‚ö†Ô∏è  Certains probl√®mes ont √©t√© d√©tect√©s.")
        print("üìã Consultez le rapport g√©n√©r√© pour plus de d√©tails.")
    
    missing = icon_manager.get_missing_icons()
    if missing:
        print(f"\n‚ùå Ic√¥nes manquantes: {', '.join(missing)}")
    
    print(f"\nüí° Pour utiliser les ic√¥nes dans votre code:")
    print("```python")
    print("from utils.icons import get_kpi_icon")
    print('icone_html = get_kpi_icon("score_global")')
    print("```")

if __name__ == "__main__":
    main()
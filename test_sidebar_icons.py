#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'affichage correct des ic√¥nes sidebar
"""

from utils.icons import get_sidebar_icon

def test_sidebar_icons():
    """Test l'affichage des ic√¥nes sidebar"""
    print("üß™ Test des ic√¥nes sidebar")
    print("=" * 50)
    
    # Liste des ic√¥nes √† tester
    sidebar_icons = [
        'navigation',
        'dashboard', 
        'politique',
        'declaration',
        'directive', 
        'audits',
        'rapports',
        'users',
        'data_automation',
        'settings'
    ]
    
    success_count = 0
    
    for icon_name in sidebar_icons:
        try:
            icon_html = get_sidebar_icon(icon_name, '20px')
            
            # V√©rifier que c'est du HTML valide avec une balise img
            if '<img' in icon_html and 'base64' in icon_html:
                print(f"‚úÖ {icon_name:15} - Ic√¥ne g√©n√©r√©e correctement")
                print(f"   Taille HTML: {len(icon_html)} caract√®res")
                success_count += 1
            else:
                print(f"‚ùå {icon_name:15} - HTML invalide")
                print(f"   Contenu: {icon_html[:100]}...")
                
        except Exception as e:
            print(f"‚ùå {icon_name:15} - Erreur: {str(e)}")
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultat: {success_count}/{len(sidebar_icons)} ic√¥nes fonctionnelles")
    
    if success_count == len(sidebar_icons):
        print("üéâ Tous les tests sont pass√©s !")
        return True
    else:
        print(f"‚ö†Ô∏è  {len(sidebar_icons) - success_count} ic√¥ne(s) ont des probl√®mes")
        return False

def test_html_rendering():
    """Test le rendu HTML des ic√¥nes"""
    print("\nüé® Test du rendu HTML")
    print("=" * 50)
    
    # Test d'une ic√¥ne sp√©cifique
    dashboard_icon = get_sidebar_icon('dashboard', '20px')
    
    print("Exemple de rendu - Ic√¥ne Dashboard:")
    print("-" * 30)
    print(dashboard_icon)
    print("-" * 30)
    
    # V√©rifier les √©l√©ments cl√©s
    checks = [
        ('<img', 'Balise img pr√©sente'),
        ('src="data:image/png;base64,', 'Donn√©es base64 pr√©sentes'),
        ('alt="', 'Attribut alt pr√©sent'),
        ('class="icon sidebar-icon"', 'Classes CSS pr√©sentes'),
        ('width: 20px', 'Largeur sp√©cifi√©e'),
        ('height: 20px', 'Hauteur sp√©cifi√©e')
    ]
    
    passed_checks = 0
    for check, description in checks:
        if check in dashboard_icon:
            print(f"‚úÖ {description}")
            passed_checks += 1
        else:
            print(f"‚ùå {description}")
    
    print(f"\nüìä Validation HTML: {passed_checks}/{len(checks)} crit√®res respect√©s")
    return passed_checks == len(checks)

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests des ic√¥nes sidebar\n")
    
    # Ex√©cuter les tests
    icons_ok = test_sidebar_icons()
    html_ok = test_html_rendering()
    
    print("\nüèÅ R√©sum√© final:")
    print("=" * 50)
    
    if icons_ok and html_ok:
        print("‚úÖ Tous les tests sont r√©ussis !")
        print("üéØ Les ic√¥nes sidebar devraient s'afficher correctement dans Streamlit")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        print("‚ö†Ô∏è  V√©rifiez les erreurs ci-dessus")
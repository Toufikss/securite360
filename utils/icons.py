"""
Module de gestion des ic√¥nes - S√©curit√© 360
Centralise la gestion et l'affichage des ic√¥nes pour l'application
"""

import base64
import os
import streamlit as st
from typing import Optional, Dict, List
try:
    from .icon_sizes import get_icon_size
except ImportError:
    # Fallback si le fichier de config n'existe pas
    def get_icon_size(icon_key: str, icon_type: str = "kpi", custom_size: str = None) -> str:
        return custom_size or "64px"

# Configuration des ic√¥nes - Mise √† jour avec toutes les ic√¥nes disponibles
ICONS_CONFIG = {
    # Indicateurs cl√©s de performance (KPI) - Correspondance exacte avec le dossier
    "kpi": {
        "score_global": {
            "file": "score global.png",
            "alt": "Score Global ISO 27001",
            "description": "Indicateur principal de conformit√© ISO 27001",
            "fallback": "üéØ",
            "category": "performance"
        },
        "criteres_evalues": {
            "file": "crit√®res √©valu√©s.png", 
            "alt": "Crit√®res √âvalu√©s",
            "description": "Nombre total de crit√®res √©valu√©s sur le total",
            "fallback": "üìã",
            "category": "evaluation"
        },
        "criteres_risque": {
            "file": "crit√®res a risque.png",
            "alt": "Crit√®res √† Risque",
            "description": "Crit√®res n√©cessitant une attention particuli√®re",
            "fallback": "‚ö†Ô∏è",
            "category": "risk"
        },
        "audits": {
            "file": "audits.png",
            "alt": "Audits",
            "description": "Nombre d'audits r√©alis√©s sur la p√©riode",
            "fallback": "üßÆ",
            "category": "audit"
        },
        "evolution_semestrielle": {
            "file": "√©volution semestrielle.png",
            "alt": "√âvolution Semestrielle", 
            "description": "Progression du score sur 6 mois",
            "fallback": "üìà",
            "category": "trend"
        },
        "delai_moyen": {
            "file": "d√©lai moyen.png",
            "alt": "D√©lai Moyen de R√©solution",
            "description": "Temps moyen pour r√©soudre les non-conformit√©s",
            "fallback": "‚è±Ô∏è",
            "category": "time"
        },
        "prochaine_echeance": {
            "file": "prochaine √©ch√©ance.png",
            "alt": "Prochaine √âch√©ance",
            "description": "Date du prochain audit ou contr√¥le pr√©vu",
            "fallback": "üìÖ",
            "category": "planning"
        },
        "maturite": {
            "file": "etoile.png",
            "alt": "Niveau de Maturit√© S√©curit√©",
            "description": "√âvaluation globale de la maturit√© s√©curit√© (1-5)",
            "fallback": "‚≠ê",
            "category": "maturity"
        }
    },
    
    # Ic√¥nes syst√®me (si besoin)
    "system": {
        "success": {
            "file": "success.png",
            "alt": "Succ√®s",
            "fallback": "‚úÖ"
        },
        "warning": {
            "file": "warning.png",
            "alt": "Attention",
            "fallback": "‚ö†Ô∏è"
        },
        "error": {
            "file": "error.png",
            "alt": "Erreur",
            "fallback": "‚ùå"
        },
        "info": {
            "file": "info.png",
            "alt": "Information",
            "fallback": "‚ÑπÔ∏è"
        }
    },
    
    # Ic√¥nes de navigation (sidebar)
    "sidebar": {
        "dashboard": {
            "file": "tableau de bord.png",
            "alt": "Tableau de bord",
            "description": "Vue d'ensemble des indicateurs de s√©curit√©",
            "fallback": "üè†",
            "category": "navigation"
        },
        "politique": {
            "file": "politique de s√©curit√©.png", 
            "alt": "Politique de s√©curit√©",
            "description": "Politiques et proc√©dures de s√©curit√©",
            "fallback": "üìò",
            "category": "navigation"
        },
        "declaration": {
            "file": "declaration d'applicapilit√©.png",
            "alt": "D√©claration d'applicabilit√©", 
            "description": "Applicabilit√© des contr√¥les ISO 27001",
            "fallback": "üßæ",
            "category": "navigation"
        },
        "directive": {
            "file": "directives et mesures.png",
            "alt": "Directives et mesures",
            "description": "Directives et mesures de s√©curit√©",
            "fallback": "‚öôÔ∏è",
            "category": "navigation"
        },
        "audits": {
            "file": "audites interne.png",
            "alt": "Audits internes",
            "description": "Gestion des audits internes",
            "fallback": "üßÆ",
            "category": "navigation"
        },
        "rapports": {
            "file": "rapport.png",
            "alt": "Rapports",
            "description": "G√©n√©ration et consultation des rapports",
            "fallback": "üìä",
            "category": "navigation"
        },
        "users": {
            "file": "gestion utilisateurs.png",
            "alt": "Gestion utilisateurs",
            "description": "Administration des utilisateurs",
            "fallback": "üë•",
            "category": "navigation"
        },
        "data_automation": {
            "file": "automatisation.png", 
            "alt": "Automatisation",
            "description": "Automatisation des processus",
            "fallback": "ü§ñ",
            "category": "navigation"
        },
        "settings": {
            "file": "parametres.png",
            "alt": "Param√®tres",
            "description": "Configuration du syst√®me",
            "fallback": "üîß",
            "category": "navigation"
        },
        "navigation": {
            "file": "navigation.png",
            "alt": "Navigation",
            "description": "Menu de navigation principal",
            "fallback": "üìã",
            "category": "navigation"
        }
    }
}

# Chemins des dossiers d'ic√¥nes
ICONS_PATHS = {
    "kpi": "icone Indicateurs cl√©s de performance",
    "system": "assets/icons/system",
    "custom": "assets/icons/custom",
    "sidebar": "icone sidebar"
}

class IconManager:
    """Gestionnaire des ic√¥nes pour l'application"""
    
    def __init__(self):
        self._icon_cache: Dict[str, str] = {}
    
    def _get_icon_path(self, category: str, filename: str) -> str:
        """Construit le chemin complet vers un fichier ic√¥ne"""
        base_path = ICONS_PATHS.get(category, "assets/icons")
        return os.path.join(base_path, filename)
    
    def _load_icon_as_base64(self, icon_path: str) -> Optional[str]:
        """
        Charge une ic√¥ne et la convertit en base64
        
        Args:
            icon_path: Chemin vers le fichier ic√¥ne
            
        Returns:
            String base64 de l'ic√¥ne ou None si erreur
        """
        cache_key = f"icon_{icon_path}"
        
        # V√©rifier le cache
        if cache_key in self._icon_cache:
            return self._icon_cache[cache_key]
        
        try:
            if os.path.exists(icon_path):
                with open(icon_path, "rb") as f:
                    icon_data = base64.b64encode(f.read()).decode()
                    self._icon_cache[cache_key] = icon_data
                    return icon_data
        except Exception as e:
            st.error(f"Erreur lors du chargement de l'ic√¥ne {icon_path}: {str(e)}")
        
        return None
    
    def get_icon_html(self, 
                      category: str, 
                      icon_key: str, 
                      size: str = "48px", 
                      css_class: str = "") -> str:
        """
        G√©n√®re le HTML pour afficher une ic√¥ne
        
        Args:
            category: Cat√©gorie de l'ic√¥ne (kpi, system, etc.)
            icon_key: Cl√© de l'ic√¥ne dans la configuration
            size: Taille de l'ic√¥ne (ex: "48px", "2rem")
            css_class: Classes CSS additionnelles
            
        Returns:
            HTML de l'ic√¥ne ou fallback emoji
        """
        try:
            # R√©cup√©rer la configuration de l'ic√¥ne
            icon_config = ICONS_CONFIG.get(category, {}).get(icon_key)
            if not icon_config:
                return "üìä"  # Ic√¥ne par d√©faut
            
            # Construire le chemin du fichier
            icon_path = self._get_icon_path(category, icon_config["file"])
            
            # Charger l'ic√¥ne
            icon_b64 = self._load_icon_as_base64(icon_path)
            
            if icon_b64:
                css_classes = f"icon {css_class}".strip()
                return f'''<img src="data:image/png;base64,{icon_b64}" 
                              alt="{icon_config['alt']}" 
                              class="{css_classes}"
                              style="width: {size}; height: {size}; object-fit: contain;">'''
            else:
                # Fallback vers l'emoji
                return icon_config["fallback"]
                
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration de l'ic√¥ne {category}.{icon_key}: {str(e)}")
            return "üìä"
    
    def get_kpi_icon(self, icon_key: str, size: str = None) -> str:
        """
        Raccourci pour obtenir une ic√¥ne KPI
        
        Args:
            icon_key: Cl√© de l'ic√¥ne KPI
            size: Taille de l'ic√¥ne (si None, utilise la config)
            
        Returns:
            HTML de l'ic√¥ne KPI
        """
        # Utiliser la taille configur√©e ou celle fournie
        final_size = get_icon_size(icon_key, "kpi", size)
        return self.get_icon_html("kpi", icon_key, final_size, "kpi-icon")
    
    def get_system_icon(self, icon_key: str, size: str = "24px") -> str:
        """
        Raccourci pour obtenir une ic√¥ne syst√®me
        
        Args:
            icon_key: Cl√© de l'ic√¥ne syst√®me
            size: Taille de l'ic√¥ne
            
        Returns:
            HTML de l'ic√¥ne syst√®me
        """
        return self.get_icon_html("system", icon_key, size, "system-icon")
    
    def get_sidebar_icon(self, icon_key: str, size: str = "20px") -> str:
        """
        Raccourci pour obtenir une ic√¥ne de sidebar
        
        Args:
            icon_key: Cl√© de l'ic√¥ne sidebar
            size: Taille de l'ic√¥ne
            
        Returns:
            HTML de l'ic√¥ne sidebar
        """
        return self.get_icon_html("sidebar", icon_key, size, "sidebar-icon")
    
    def list_available_icons(self, category: str = None) -> Dict:
        """
        Liste les ic√¥nes disponibles
        
        Args:
            category: Cat√©gorie sp√©cifique ou None pour toutes
            
        Returns:
            Dictionnaire des ic√¥nes disponibles
        """
        if category:
            return ICONS_CONFIG.get(category, {})
        return ICONS_CONFIG
    
    def add_custom_icon(self, 
                       category: str, 
                       icon_key: str, 
                       filename: str, 
                       alt_text: str, 
                       fallback: str = "üìä"):
        """
        Ajoute une ic√¥ne personnalis√©e √† la configuration
        
        Args:
            category: Cat√©gorie de l'ic√¥ne
            icon_key: Cl√© unique pour l'ic√¥ne
            filename: Nom du fichier ic√¥ne
            alt_text: Texte alternatif
            fallback: Emoji de fallback
        """
        if category not in ICONS_CONFIG:
            ICONS_CONFIG[category] = {}
        
        ICONS_CONFIG[category][icon_key] = {
            "file": filename,
            "alt": alt_text,
            "fallback": fallback
        }
    
    def clear_cache(self):
        """Vide le cache des ic√¥nes"""
        self._icon_cache.clear()
    
    def preload_icons(self, category: str = None):
        """
        Pr√©charge les ic√¥nes en m√©moire
        
        Args:
            category: Cat√©gorie √† pr√©charger ou None pour toutes
        """
        categories_to_load = [category] if category else ICONS_CONFIG.keys()
        
        for cat in categories_to_load:
            if cat in ICONS_CONFIG:
                for icon_key, config in ICONS_CONFIG[cat].items():
                    icon_path = self._get_icon_path(cat, config["file"])
                    self._load_icon_as_base64(icon_path)
    
    def check_icons_availability(self, category: str = None) -> Dict[str, Dict]:
        """
        V√©rifie la disponibilit√© de toutes les ic√¥nes configur√©es
        
        Args:
            category: Cat√©gorie √† v√©rifier ou None pour toutes
            
        Returns:
            Dictionnaire avec le statut de chaque ic√¥ne
        """
        result = {}
        categories_to_check = [category] if category else ICONS_CONFIG.keys()
        
        for cat in categories_to_check:
            if cat in ICONS_CONFIG:
                result[cat] = {}
                for icon_key, config in ICONS_CONFIG[cat].items():
                    icon_path = self._get_icon_path(cat, config["file"])
                    result[cat][icon_key] = {
                        "file": config["file"],
                        "path": icon_path,
                        "exists": os.path.exists(icon_path),
                        "alt": config.get("alt", ""),
                        "description": config.get("description", ""),
                        "fallback": config.get("fallback", "üìä")
                    }
        
        return result
    
    def get_missing_icons(self, category: str = None) -> List[str]:
        """
        Retourne la liste des ic√¥nes manquantes
        
        Args:
            category: Cat√©gorie √† v√©rifier ou None pour toutes
            
        Returns:
            Liste des cl√©s d'ic√¥nes manquantes
        """
        missing = []
        availability = self.check_icons_availability(category)
        
        for cat, icons in availability.items():
            for icon_key, info in icons.items():
                if not info["exists"]:
                    missing.append(f"{cat}.{icon_key}")
        
        return missing

# Instance globale du gestionnaire d'ic√¥nes
icon_manager = IconManager()

# Fonctions helper pour la compatibilit√©
def get_kpi_icon(icon_key: str, size: str = None) -> str:
    """Fonction helper pour obtenir une ic√¥ne KPI avec taille configur√©e"""
    return icon_manager.get_kpi_icon(icon_key, size)

def get_system_icon(icon_key: str, size: str = "24px") -> str:
    """Fonction helper pour obtenir une ic√¥ne syst√®me"""
    return icon_manager.get_system_icon(icon_key, size)

def get_sidebar_icon(icon_key: str, size: str = "20px") -> str:
    """Fonction helper pour obtenir une ic√¥ne de sidebar"""
    return icon_manager.get_sidebar_icon(icon_key, size)

# Mapping des anciennes fonctions vers les nouvelles cl√©s
KPI_ICON_MAPPING = {
    "score global": "score_global",
    "crit√®res √©valu√©s": "criteres_evalues",
    "crit√®res a risque": "criteres_risque",
    "audits": "audits",
    "√©volution semestrielle": "evolution_semestrielle",
    "d√©lai moyen": "delai_moyen",
    "prochaine √©ch√©ance": "prochaine_echeance",
    "etoile": "maturite"
}

def get_icon_html_legacy(icon_name: str, size: str = "48px") -> str:
    """
    Fonction de compatibilit√© avec l'ancien syst√®me
    
    Args:
        icon_name: Nom de l'ic√¥ne (ancien format)
        size: Taille de l'ic√¥ne
        
    Returns:
        HTML de l'ic√¥ne
    """
    # Mapper l'ancien nom vers la nouvelle cl√©
    icon_key = KPI_ICON_MAPPING.get(icon_name, icon_name)
    return get_kpi_icon(icon_key, size)
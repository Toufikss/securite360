#!/usr/bin/env python3
"""
Script de v√©rification de la compatibilit√© de d√©ploiement
V√©rifie que tous les modules requis sont disponibles et compatibles
"""

import sys
import importlib
from typing import Dict, List, Tuple

def check_module_availability() -> Dict[str, bool]:
    """V√©rifie la disponibilit√© de tous les modules requis"""
    
    required_modules = {
        # Modules externes
        'streamlit': 'streamlit>=1.31.0',
        'bcrypt': 'bcrypt>=4.1.2',
        'plotly': 'plotly>=5.18.0',
        'pandas': 'pandas>=2.1.4',
        'reportlab': 'reportlab>=4.0.9',
        'PIL': 'Pillow>=10.2.0',
        'typing_extensions': 'typing-extensions>=4.0.0',
        
        # Modules standard Python (doivent √™tre disponibles)
        'sqlite3': 'built-in',
        'pathlib': 'built-in',
        'os': 'built-in',
        'datetime': 'built-in',
        'json': 'built-in',
        'hashlib': 'built-in',
        'base64': 'built-in',
        'io': 'built-in'
    }
    
    results = {}
    
    for module_name, version_info in required_modules.items():
        try:
            importlib.import_module(module_name)
            results[module_name] = True
            print(f"‚úÖ {module_name} - {version_info}")
        except ImportError:
            results[module_name] = False
            print(f"‚ùå {module_name} - {version_info} - MANQUANT")
    
    return results

def check_python_version() -> bool:
    """V√©rifie la version Python"""
    min_version = (3, 11)
    current_version = sys.version_info[:2]
    
    if current_version >= min_version:
        print(f"‚úÖ Python {current_version[0]}.{current_version[1]} (minimum requis: {min_version[0]}.{min_version[1]})")
        return True
    else:
        print(f"‚ùå Python {current_version[0]}.{current_version[1]} (minimum requis: {min_version[0]}.{min_version[1]})")
        return False

def check_package_structure() -> bool:
    """V√©rifie la structure des packages Python"""
    import os
    
    required_init_files = [
        'utils/__init__.py',
        'pages/__init__.py'
    ]
    
    print("üìÅ V√©rification de la structure des packages:")
    all_ok = True
    
    for init_file in required_init_files:
        if os.path.exists(init_file):
            print(f"‚úÖ {init_file}")
        else:
            print(f"‚ùå {init_file} - MANQUANT")
            all_ok = False
    
    return all_ok

def main():
    """Fonction principale de v√©rification"""
    print("üîç V√©rification de la compatibilit√© de d√©ploiement")
    print("=" * 60)
    
    # V√©rification version Python
    python_ok = check_python_version()
    print()
    
    # V√©rification structure packages
    structure_ok = check_package_structure()
    print()
    
    # V√©rification modules
    print("üì¶ V√©rification des modules requis:")
    modules_results = check_module_availability()
    print()
    
    # Test import principal
    print("üß™ Test d'import de l'application:")
    try:
        from utils.config import APP_NAME, APP_VERSION, GLOBAL_CSS, COLORS
        print("‚úÖ Import utils.config r√©ussi")
        app_import_ok = True
    except ImportError as e:
        print(f"‚ùå Erreur import utils.config: {e}")
        app_import_ok = False
    print()
    
    # R√©sum√©
    all_modules_ok = all(modules_results.values())
    
    if python_ok and structure_ok and all_modules_ok and app_import_ok:
        print("üéâ SUCC√àS: Tous les pr√©requis sont satisfaits!")
        print("‚ú® Votre application est pr√™te pour le d√©ploiement!")
        return 0
    else:
        print("‚ö†Ô∏è  ATTENTION: Des pr√©requis sont manquants!")
        if not python_ok:
            print("   - Version Python insuffisante")
        if not structure_ok:
            print("   - Structure de packages incorrecte")
        if not all_modules_ok:
            missing = [k for k, v in modules_results.items() if not v]
            print(f"   - Modules manquants: {', '.join(missing)}")
        if not app_import_ok:
            print("   - Erreur d'import de l'application")
        return 1

if __name__ == "__main__":
    exit(main())